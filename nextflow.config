/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NorwegianVeterinaryInstitute/DPI Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Global default params, used in configs

params {
    // Input
    input			= null
    
    // Bakta Annotation options
    baktaDB         = null
    training        = null 
    genus           = null
    species         = null
    // If there are spaces within your comment you must have the comment ' '  and the  "" around, otherwise wont work
    comment         = "'NA'" 

    // output parameters - A sqlite database
    sqlitedb        = "out.sqlite"

    // general options 
	time_multiplier		= 1
    publish_dir_mode    = "copy"
    debugme             = true
    
    }

// Define profiles
profiles {
    conda {
        params.enable_conda    = true
        apptainer.enabled      = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        apptainer.enabled      = false
        params.enable_conda    = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        apptainer.enabled      = false
        params.enable_conda    = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        apptainer.enabled      = false
        params.enable_conda    = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        apptainer.enabled      = false
        params.enable_conda    = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        apptainer.enabled      = false
        params.enable_conda    = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        singularity.enabled    = false
        params.enable_conda    = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    test_github_DPI { includeConfig 'conf/test_github_DPI.config' }
    test_work_local { includeConfig 'conf/test_work_local.config' }
    test_saga { includeConfig 'conf/test_saga.config' }
    }

conda { createTimeout = "120 min" }

// Load config for module-specific options
includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

// Manifest
manifest {
    name            = 'NorwegianVeterinaryInstitute/DPI'
    author          = 'Eve Fiskebeck, HÃ¥kon Kaspersen'
    homePage        = 'https://github.com/NorwegianVeterinaryInstitute/DPI'
    description     = 'DPI: a Tool that reports Differences between Pairs of Isolates'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.1'
    version         = '0.2'
    }

// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
